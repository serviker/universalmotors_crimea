import { connectToDatabase } from "@/lib/mongodb";
import mongoose from "mongoose";
import { NextResponse } from "next/server";

export async function GET() {
    await connectToDatabase();
    await mongoose.connection.asPromise(); // –î–æ–∂–∏–¥–∞–µ–º—Å—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

    if (!mongoose.connection.db) {
        console.error("–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞");
        return NextResponse.json({ error: "–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞" }, { status: 500 });
    }

    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!");

    const collections = await mongoose.connection.db.listCollections().toArray();
    console.log("üìÇ –°–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π:", collections);

    return NextResponse.json({ collections });
}

/* export async function GET() {
    await connectToDatabase();
    await mongoose.connection.asPromise();

    return NextResponse.json({
        status: mongoose.connection.readyState === 1 ? "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞" : "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
        readyState: mongoose.connection.readyState
    });
}*/