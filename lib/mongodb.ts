// lib/mongodb.ts
import mongoose from "mongoose";
import dotenv from "dotenv";
dotenv.config();

const MONGODB_URI = process.env.MONGODB_URI as string;

console.log("üîê URI MongoDB:", MONGODB_URI);

if (!MONGODB_URI) {
    throw new Error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è MONGODB_URI –Ω–µ –∑–∞–¥–∞–Ω–∞!");
}

// ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
declare global {
    // eslint-disable-next-line no-var
    var mongooseCache: {
        conn: typeof mongoose | null;
        promise: Promise<typeof mongoose> | null;
    };
}

// üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–µ—à–∞, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –±—ã–ª–æ
global.mongooseCache ||= {
    conn: null,
    promise: null,
};

const cached = global.mongooseCache;

export async function connectToDatabase() {
    if (cached.conn) {
        if (process.env.NODE_ENV === "development") {
            console.log("üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ MongoDB");
        }
        return cached.conn;
    }

    if (!cached.promise) {
        if (process.env.NODE_ENV === "development") {
            console.log("‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...");
        }

        cached.promise = mongoose.connect(MONGODB_URI!).then((mongooseInstance) => {
            if (process.env.NODE_ENV === "development") {
                console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB!");
            }
            return mongooseInstance;
        }).catch((error) => {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:", error);
            throw error; // –Ω–µ –≤—ã—Ö–æ–¥–∏–º process.exit, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç–ª–æ–≤–∏—Ç—å –æ—à–∏–±–∫—É –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–µ
        });
    }

    cached.conn = await cached.promise;
    return cached.conn;
}


/*if (!MONGODB_URI) {
    throw new Error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è MONGODB_URI –Ω–µ –∑–∞–¥–∞–Ω–∞!");
}

// üîß –†–∞—Å—à–∏—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç (–æ–¥–∏–Ω —Ä–∞–∑ –≤ –ø—Ä–æ–µ–∫—Ç–µ)
declare global {
    // eslint-disable-next-line no-var
    var mongoose: {
        conn: mongoose.Connection | null;
        promise: Promise<mongoose.Connection> | null;
    } | undefined;
}

// ‚õîÔ∏è –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ global.mongoose –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
if (!global.mongoose) {
    global.mongoose = {
        conn: null,
        promise: null,
    };
}

const cached = global.mongoose;

export async function connectToDatabase() {
    if (cached.conn) return cached.conn;

    if (!cached.promise) {
        console.log("‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...");

        cached.promise = mongoose
            .connect(MONGODB_URI)
            .then((mongoose) => {
                console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB!");
                return mongoose.connection.asPromise();
            })
            .catch((error) => {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:", error);
                process.exit(1);
            });
    }

    cached.conn = await cached.promise;

    if (cached.conn.db) {
        console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞:", cached.conn.db.databaseName);
    } else {
        console.error("‚ùå –û—à–∏–±–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.");
    }

    return cached.conn;
}*/
